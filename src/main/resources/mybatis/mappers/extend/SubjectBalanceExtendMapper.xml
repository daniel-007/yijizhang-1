<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.ahyc.yjz.mapper.extend.SubjectBalanceExtendMapper" >
  <resultMap id="ResultMap" type="cn.ahyc.yjz.dto.SubjectBalanceDto" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 15:13:58 CST 2015.
    -->
    <constructor >
      <idArg column="id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="subject_code" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="initial_debit_balance" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="initial_credit_balance" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="period_debit_occur" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="period_credit_occur" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="year_debit_occur" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="year_credit_occur" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="terminal_debit_balance" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="terminal_credit_balance" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="book_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="period_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="direction" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Sep 29 15:13:58 CST 2015.
    -->
    id, subject_code, initial_debit_balance, initial_credit_balance, period_debit_occur,
    period_credit_occur, year_debit_occur, year_credit_occur, terminal_debit_balance,
    terminal_credit_balance, book_id, period_id, direction
  </sql>
  <select id="selectProfitAndLoss" parameterType="java.util.Map" resultMap="ResultMap">
    SELECT a.id, a.subject_code, a.initial_debit_balance, a.initial_credit_balance, a.period_debit_occur, 
	    a.period_credit_occur, a.year_debit_occur, a.year_credit_occur, a.terminal_debit_balance, 
	    a.terminal_credit_balance, a.book_id, a.period_id, t.direction
	FROM
	  account_subject t,
	  subject_balance a 
	WHERE NOT EXISTS 
	  (SELECT 
	    * 
	  FROM
	    account_subject t1,
	    account_subject t2 
	  WHERE t1.subject_code = t2.parent_subject_code 
	    AND t.subject_code = t1.subject_code) 
	  AND t.subject_code = a.subject_code 
	  AND t.book_id = a.book_id 
	  AND a.book_id = #{bookId,jdbcType=BIGINT}
	  AND a.period_id = #{periodId,jdbcType=BIGINT}
	  AND t.subject_code LIKE #{startCode,jdbcType=VARCHAR}"%"
	  AND ((a.terminal_credit_balance!=0 AND a.terminal_credit_balance IS NOT NULL)  OR 
	  (a.terminal_debit_balance!=0 AND a.terminal_debit_balance IS NOT NULL )) 
	  ORDER BY a.id
  </select>

  <insert id="insertOrUpdateSubjectBalance" parameterType="java.lang.Long">
  <![CDATA[
		INSERT INTO subject_balance (
			subject_code,
			book_id,
			period_id,
			period_debit_occur,
			period_credit_occur,
			year_debit_occur,
			year_credit_occur,
			terminal_debit_balance,
			terminal_credit_balance,
			initial_debit_balance,
			initial_credit_balance,
			profit_loss_occur_amount,
			profit_loss_total_occur_amount
		) 
		SELECT sb.* FROM (
		SELECT
			t2.subject_code,
			t2.book_id,
			t.id,
			NULLIF(sb.debit, 0) AS debit,
			NULLIF(sb.credit, 0) AS credit,
			NULLIF(IFNULL(sby.ydebit,0)+IFNULL(t2.total_debit,0),0) AS ydebit,
			NULLIF(IFNULL(sby.ycredit,0)+IFNULL(t2.total_credit,0),0) AS ycredit,
			NULLIF(IF(t2.direction=1,IFNULL(t2.initial_left,0)+IFNULL(sby.ydebit,0)-IFNULL(sby.ycredit,0),NULL),0) AS t_debit_balance,
			NULLIF(IF(t2.direction=2,IFNULL(t2.initial_left,0)-IFNULL(sby.ydebit,0)+IFNULL(sby.ycredit,0),NULL),0) AS t_credit_balance,
			NULLIF(IF(t2.direction=1,IFNULL(t2.initial_left,0)+IFNULL(sby.ydebit,0)-IFNULL(sby.ycredit,0)-IFNULL(sb.debit,0)+IFNULL(sb.credit,0),NULL),0) AS initial_debit_balance,
			NULLIF(IF(t2.direction=2,IFNULL(t2.initial_left,0)-IFNULL(sby.ydebit,0)+IFNULL(sby.ycredit,0)+IFNULL(sb.debit,0)-IFNULL(sb.credit,0),NULL),0) AS initial_credit_balance,
			CASE t2.direction 
				WHEN 1 THEN NULLIF(IFNULL(t5.debit, 0) - IFNULL(t5.credit, 0),0)
				WHEN 2 THEN NULLIF(IFNULL(t5.credit, 0) - IFNULL(t5.debit, 0),0)
				END AS profit_loss_occur_amount,
			CASE t2.direction WHEN 1 THEN NULLIF(IFNULL(t2.year_occur_amount, 0) + IFNULL(t4.ydebit, 0) - IFNULL(t4.ycredit, 0),0)
				WHEN 2 THEN NULLIF(IFNULL(t2.year_occur_amount, 0) - IFNULL(t4.ydebit, 0) + IFNULL(t4.ycredit, 0),0)
				END AS profit_loss_total_occur_amount
		FROM
			period t,
			account_subject t2
			LEFT JOIN (
				SELECT
					t.subject_code,
					p.book_id,
					sum(t.debit) AS ydebit,
					sum(t.credit) AS ycredit
				FROM
					voucher_detail t,
					voucher v,
					period p,
					period p1
				WHERE
					t.voucher_id = v.id
				AND p.id = v.period_id
				AND p.book_id = p1.book_id
				AND p1.id = #{periodId,jdbcType=BIGINT}
				AND p.current_period <= p1.current_period
				AND v.carry_over is null
				GROUP BY
					t.subject_code,
					p.book_id
			) AS t4 ON t2.subject_code = t4.subject_code AND t2.book_id = t4.book_id
			LEFT JOIN (
				SELECT
					t.subject_code,
					p.book_id,
					sum(t.debit) AS ydebit,
					sum(t.credit) AS ycredit
				FROM
					voucher_detail t,
					voucher v,
					period p,
					period p1
				WHERE
					t.voucher_id = v.id
				AND p.id = v.period_id
				AND p.book_id = p1.book_id
				AND p1.id = #{periodId,jdbcType=BIGINT}
				AND p.current_period <= p1.current_period
				GROUP BY
					t.subject_code,
					p.book_id
			) AS sby ON t2.subject_code = sby.subject_code AND t2.book_id = sby.book_id
				LEFT JOIN (
				SELECT
					t.subject_code,
					p.book_id,
					v.period_id,
					sum(t.debit) AS debit,
					sum(t.credit) AS credit
				FROM
					voucher_detail t,
					voucher v,
					period p
				WHERE
					t.voucher_id = v.id
				AND p.id = v.period_id
				AND v.period_id = #{periodId,jdbcType=BIGINT}
				AND v.carry_over is null
				GROUP BY
					t.subject_code,
					p.book_id,
					v.period_id
			) AS t5 ON t5.subject_code = sby.subject_code and  t5.book_id = sby.book_id
			LEFT JOIN (
				SELECT
					t.subject_code,
					p.book_id,
					v.period_id,
					sum(t.debit) AS debit,
					sum(t.credit) AS credit
				FROM
					voucher_detail t,
					voucher v,
					period p
				WHERE
					t.voucher_id = v.id
				AND p.id = v.period_id
				AND v.period_id = #{periodId,jdbcType=BIGINT}
				GROUP BY
					t.subject_code,
					p.book_id,
					v.period_id
			) AS sb ON sb.subject_code = sby.subject_code and  sb.book_id = sby.book_id
			LEFT JOIN subject_balance t3 ON t2.subject_code = t3.subject_code AND t2.book_id = t3.book_id
		WHERE
			t.id = #{periodId,jdbcType=BIGINT}
			AND t.book_id = t2.book_id
			AND t2.`level` > 0
			AND (t2.initial_left IS NOT NULL
				OR t2.total_debit IS NOT NULL
				OR t2.total_credit IS NOT NULL
				OR sb.period_id IS NOT NULL
				OR t3.id IS NOT NULL)
		) sb
		ON DUPLICATE KEY UPDATE period_debit_occur = sb.debit,
		 	period_credit_occur = sb.credit,
		 	year_debit_occur = sb.ydebit,
		 	year_credit_occur = sb.ycredit,
		 	terminal_debit_balance=sb.t_debit_balance,
			terminal_credit_balance=sb.t_credit_balance,
			initial_debit_balance=sb.initial_debit_balance,
			initial_credit_balance=sb.initial_credit_balance,
			profit_loss_occur_amount=sb.profit_loss_occur_amount,
			profit_loss_total_occur_amount=sb.profit_loss_total_occur_amount
	]]>
  </insert>

  <insert id="insertNextPeriodSubjectBalance" parameterType="java.util.Map">
		INSERT INTO subject_balance (
			subject_code,
			book_id,
			period_id,
			terminal_debit_balance,
			terminal_credit_balance,
			initial_debit_balance,
			initial_credit_balance
			<if test="isYearEnd == null">
				,year_debit_occur,
				year_credit_occur,
				profit_loss_total_occur_amount
			</if>
		) SELECT
			subject_code,
			#{bookId,jdbcType=BIGINT},
			#{newPeriodId,jdbcType=BIGINT},
			terminal_debit_balance,
			terminal_credit_balance,
			terminal_debit_balance,
			terminal_credit_balance
			<if test="isYearEnd == null">
				,year_debit_occur,
				year_credit_occur,
				profit_loss_total_occur_amount
			</if>
		FROM
			subject_balance
		WHERE
			period_id = #{periodId,jdbcType=BIGINT}
  </insert>

  <update id="collectSubjectBalance" parameterType="java.lang.Long">
  	call collectSubjectBalance(#{periodId,jdbcType=BIGINT})
  </update>

  <select id="selectSubjectBalanceList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			t2.subject_name,
			FORMAT(IFNULL(t.initial_debit_balance, 0),2) AS initial_debit_balance,
			FORMAT(IFNULL(t.initial_credit_balance, 0),2) AS initial_credit_balance,
			FORMAT(IFNULL(t.period_debit_occur, 0),2) AS period_debit_occur,
			FORMAT(IFNULL(t.period_credit_occur, 0),2) AS period_credit_occur,
			FORMAT(IFNULL(t.year_debit_occur, 0),2) AS year_debit_occur,
			FORMAT(IFNULL(t.year_credit_occur, 0),2) AS year_credit_occur,
			FORMAT(IFNULL(t.terminal_debit_balance, 0),2) AS terminal_debit_balance,
			FORMAT(IFNULL(t.terminal_credit_balance,0),2) AS terminal_credit_balance
		FROM
			period p,
			account_subject t2
		LEFT JOIN subject_balance t ON t.subject_code = t2.subject_code AND t.period_id = #{periodId,jdbcType=BIGINT}
		WHERE
			p.id = #{periodId,jdbcType=BIGINT}
		AND t2.subject_code = #{subjectCode,jdbcType=BIGINT}
		AND p.book_id = t2.book_id
  </select>
  <select id="selectBalanceList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			t.subject_code AS subject_code,
			CONCAT(LPAD('',(t.`level`-1)*2,'&#8194;'),t.subject_name) AS subject_name,
			t.current_period AS current_period,
			t.initial_debit_balance,
			t.initial_credit_balance,
			t.period_debit_occur,
			t.period_credit_occur,
			t.year_debit_occur,
			t.year_credit_occur,
			t.terminal_debit_balance,
			t.terminal_credit_balance
		FROM
			(
				SELECT
					a.subject_code,
					a.subject_name,
					a.`level`,
					p.current_period,
					FORMAT(sum(t.initial_debit_balance),2) AS initial_debit_balance,
					FORMAT(sum(t.initial_credit_balance),2) AS initial_credit_balance,
					FORMAT(sum(t.period_debit_occur),2) AS period_debit_occur,
					FORMAT(sum(t.period_credit_occur),2) AS period_credit_occur,
					FORMAT(sum(t.year_debit_occur),2) AS year_debit_occur,
					FORMAT(sum(t.year_credit_occur),2) AS year_credit_occur,
					FORMAT(sum(t.terminal_debit_balance),2) AS terminal_debit_balance,
					FORMAT(sum(t.terminal_credit_balance),2) AS terminal_credit_balance
				FROM
					account_subject a
					LEFT JOIN period p ON a.book_id = p.book_id
					<![CDATA[
					AND p.current_period >= #{periodFrom,jdbcType=BIGINT}
					AND p.current_period <= #{periodTo,jdbcType=BIGINT}
					]]>
					LEFT JOIN subject_balance t ON t.subject_code = a.subject_code AND a.book_id = t.book_id AND t.period_id = p.id
					WHERE
						<![CDATA[
						a.`level` <= #{level,jdbcType=BIGINT}
						]]>
						AND a.`level` > 0
					 	AND a.book_id = #{bookId,jdbcType=BIGINT}
						<if test="subjectCodeFrom != null">
						<![CDATA[
						AND CAST(a.subject_code AS CHAR) >= CAST(#{subjectCodeFrom,jdbcType=BIGINT} AS CHAR)
						]]>
						</if>
						<if test="subjectCodeTo != null">
						<![CDATA[
						AND CAST(a.subject_code AS CHAR) < CAST(#{subjectCodeTo,jdbcType=BIGINT} AS CHAR)
						]]>
						</if>
				GROUP BY
					CONCAT(p.current_period,a.subject_code)
			) t
		<if test="valueNotNull == null">
			WHERE
				t.initial_debit_balance IS NOT NULL
			OR t.initial_credit_balance IS NOT NULL
			OR t.period_debit_occur IS NOT NULL
			OR t.period_credit_occur IS NOT NULL
		</if>
		UNION ALL
		SELECT
			'',
			'合计',
			'',
			FORMAT(sum(t.initial_debit_balance),2) AS initial_debit_balance,
			FORMAT(sum(t.initial_credit_balance),2) AS initial_credit_balance,
			FORMAT(sum(t.period_debit_occur),2) AS period_debit_occur,
			FORMAT(sum(t.period_credit_occur),2) AS period_credit_occur,
			FORMAT(sum(t.year_debit_occur),2) AS year_debit_occur,
			FORMAT(sum(t.year_credit_occur),2) AS year_credit_occur,
			FORMAT(sum(t.terminal_debit_balance),2) AS terminal_debit_balance,
			FORMAT(sum(t.terminal_credit_balance),2) AS terminal_credit_balance
		FROM
			account_subject a
			LEFT JOIN period p ON a.book_id = p.book_id
			<![CDATA[
			AND p.current_period >= #{periodFrom,jdbcType=BIGINT}
			AND p.current_period <= #{periodTo,jdbcType=BIGINT}
			]]>
			LEFT JOIN subject_balance t ON t.subject_code = a.subject_code AND a.book_id = t.book_id AND t.period_id = p.id
			WHERE
				<![CDATA[
				a.`level` = 1
				]]>
			 	AND a.book_id = #{bookId,jdbcType=BIGINT}
				<if test="subjectCodeFrom != null">
				<![CDATA[
				AND CAST(a.subject_code AS CHAR) >= CAST(#{subjectCodeFrom,jdbcType=BIGINT} AS CHAR)
				]]>
				</if>
				<if test="subjectCodeTo != null">
				<![CDATA[
				AND CAST(a.subject_code AS CHAR) < CAST(#{subjectCodeTo,jdbcType=BIGINT} AS CHAR)
				]]>
				</if>
  </select>
  <select id="selectBalanceBySubjectCode" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
		  a.direction,
		  CASE
		    WHEN a.direction = 1 
		    THEN '借' 
		    ELSE '贷' 
		  END AS direction_value,
		 IFNULL(CASE
		    WHEN a.direction = 1 
		    THEN d.initial_debit_balance 
		    ELSE d.initial_credit_balance 
		  END,0) AS balance  
		FROM
		  account_subject a 
		  LEFT JOIN period b 
		    ON a.book_id = b.book_id 
		    AND b.current_period =  #{currentPeriod,jdbcType=INTEGER}
		  LEFT JOIN subject_balance d 
		    ON (
		      a.book_id = d.book_id 
		      AND b.id = d.period_id 
		      AND a.subject_code = d.subject_code
		    ) 
		WHERE a.subject_code =  #{subjectCode,jdbcType=BIGINT}
		  AND a.book_id =#{bookId,jdbcType=BIGINT}
  </select>

   <!-- 获取余额表和对应科目方法 -->
    <select id="subjectBalanceAndDirection" parameterType="java.lang.Long" resultType="java.util.Map" >
        SELECT DISTINCT t.*, t1.direction
        FROM subject_balance t, account_subject t1
        WHERE t.period_id = #{periodId}
            AND t1.book_id = t.book_id
            AND t.subject_code = t1.subject_code
    </select>

	<select id="selectLatestBalance" parameterType="map" resultType="map">
		SELECT
		c.subject_name,
		FORMAT(IF(ISNULL(c.balance), 0.00, c.balance),2) AS balance,
		c.subject_code
		FROM
		(SELECT
		b.subject_code,
		b.subject_name,
		CASE
		WHEN b.direction = 1
		THEN a.terminal_debit_balance
		ELSE a.terminal_credit_balance
		END AS balance
		FROM
		account_subject b
		LEFT JOIN subject_balance a
		ON (
		a.subject_code = b.subject_code
		AND a.book_id = b.book_id
		AND a.period_id = #{currentPeriod,jdbcType=BIGINT}
		)
		WHERE b.subject_code IN (1001, 1002, 1122, 2202, 1221, 1403, 1405)
		AND b.book_id = #{bookId,jdbcType=BIGINT}) c
		ORDER BY FIND_IN_SET(
		c.subject_code,
		'1001,1002,1122,2202,1221,1403,1405'
		)
		LIMIT 7 ;
	</select>

	<select id="selectLedgerList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			a.subject_code,
			IF (summary = '期初余额' OR summary = '上年结转',a.subject_code,'') as subject_code_text,
			IF (summary = '期初余额' OR summary = '上年结转',CONCAT(LPAD('',(a.`level`-1)*2,'&#8194;'),a.subject_name),'') as subject_name,
			a.summary,
			format(a.debit,2) as debit,
			format(a.credit,2) as credit,
			format(a.balance,2) as balance,
			c.init_year,
			a.current_period,
			IF (summary = '期初余额' OR summary = '上年结转',1,DAY(LAST_DAY(STR_TO_DATE(CONCAT(c.init_year,'-',a.current_period),'%Y-%m-%d')))) AS daynum,
			IF (ISNULL(a.balance),'平',IF (a.direction = '1','借','贷')) as direction,
			a.wordNo,
			c.init_period
		FROM
			(
				<if test="lastYear != null">
					SELECT
						a.subject_name,
						a.subject_code,
						a.direction,
						a.book_id,
						a.`level`,
						'1' AS current_period,
						'上年结转' AS summary,
						NULL AS debit,
						NULL AS credit,
						IF (
							a.direction = '1',
							nullif(ifnull(a.initial_left, 0) - ifnull(a.total_debit, 0) + ifnull(a.total_credit, 0),0),
							nullif(ifnull(a.initial_left, 0) + ifnull(a.total_debit, 0) - ifnull(a.total_credit, 0),0)
						) AS balance,
						NULL AS wordNo
					FROM
						account_subject a
					WHERE
						a.book_id = #{bookId,jdbcType=BIGINT}
					AND ( a.total_debit IS NOT NULL OR a.total_credit IS NOT NULL )
					<![CDATA[
					AND a.`level` <= #{level,jdbcType=BIGINT}
					]]>
					AND a.`level` > 0
				UNION ALL
					SELECT
						a.subject_name,
						a.subject_code,
						a.direction,
						a.book_id,
						a.`level`,
						'1' AS current_period,
						'本期合计' AS summary,
						a.total_debit,
						a.total_credit,
						a.initial_left AS balance,
						NULL AS wordNo
					FROM
						account_subject a
					WHERE
						a.book_id = #{bookId,jdbcType=BIGINT}
					AND ( a.total_debit IS NOT NULL OR a.total_credit IS NOT NULL )
					<![CDATA[
					AND a.`level` <= #{level,jdbcType=BIGINT}
					]]>
					AND a.`level` > 0
				UNION ALL
					SELECT
						a.subject_name,
						a.subject_code,
						a.direction,
						a.book_id,
						a.`level`,
						'1' AS current_period,
						'本年累计' AS summary,
						a.total_debit,
						a.total_credit,
						a.initial_left AS balance,
						NULL AS wordNo
					FROM
						account_subject a
					WHERE
						a.book_id = #{bookId,jdbcType=BIGINT}
					AND ( a.total_debit IS NOT NULL OR a.total_credit IS NOT NULL )
					<![CDATA[
					AND a.`level` <= #{level,jdbcType=BIGINT}
					]]>
					AND a.`level` > 0
				UNION ALL
				</if>
					SELECT
						d.subject_name,
						d.subject_code,
						d.direction,
						d.book_id,
						d.`level`,
						b.current_period,
						'期初余额' AS summary,
						NULL AS debit,
						NULL AS credit,
						IFNULL(
							a.initial_debit_balance,
							a.initial_credit_balance
						) AS balance,
						NULL AS wordNo
					FROM
						account_subject d
						LEFT JOIN period b ON d.book_id = b.book_id
						LEFT JOIN subject_balance a ON b.id = a.period_id
						AND d.subject_code = a.subject_code
					WHERE
						d.book_id = b.book_id
					AND d.book_id = #{bookId,jdbcType=BIGINT}
					AND b.current_period >= #{periodFrom,jdbcType=BIGINT}
					<![CDATA[
					AND b.current_period <= #{periodTo,jdbcType=BIGINT}
					]]>
					<if test="valueNotNull != null">
					AND ( a.period_debit_occur IS NOT NULL OR a.period_credit_occur IS NOT NULL )
					</if>
					<if test="lastYear != null">
					AND d.total_debit IS NULL
					AND d.total_credit IS NULL
					</if>
					<![CDATA[
					AND d.`level` <= #{level,jdbcType=BIGINT}
					]]>
					AND d.`level` > 0
					GROUP BY
						d.subject_code
				UNION ALL
					SELECT
						d.subject_name,
						d.subject_code,
						d.direction,
						d.book_id,
						d.`level`,
						b.current_period,
						'本期合计',
						a.period_debit_occur,
						a.period_credit_occur,
						IFNULL(
							a.terminal_debit_balance,
							a.terminal_credit_balance
						),
						NULLIF(CONCAT(c.voucher_word,min(c.voucher_no),if(min(c.voucher_no)=max(c.voucher_no),'',CONCAT('~',max(c.voucher_no)))),'~')
					FROM
						account_subject d
						LEFT JOIN period b ON d.book_id = b.book_id
						LEFT JOIN subject_balance a ON b.id = a.period_id
						AND d.subject_code = a.subject_code
						LEFT JOIN (
							SELECT
								c.voucher_no,
								c.voucher_word,
								e.subject_code,
								c.period_id
							FROM
								voucher c,
								voucher_detail e
							WHERE
								c.id = e.voucher_id
						) c ON c.period_id = b.id AND c.subject_code = d.subject_code
					WHERE
						d.book_id = #{bookId,jdbcType=BIGINT}
					AND b.current_period >= #{periodFrom,jdbcType=BIGINT}
					<![CDATA[
					AND b.current_period <= #{periodTo,jdbcType=BIGINT}
					]]>
					<if test="valueNotNull != null">
					AND ( a.period_debit_occur IS NOT NULL OR a.period_credit_occur IS NOT NULL )
					</if>
					<![CDATA[
					AND d.`level` <= #{level,jdbcType=BIGINT}
					]]>
					AND d.`level` > 0
					GROUP BY
						d.subject_code,
						b.current_period
				UNION ALL
					SELECT
						d.subject_name,
						d.subject_code,
						d.direction,
						d.book_id,
						d.`level`,
						b.current_period,
						'本年累计',
						a.year_debit_occur,
						a.year_credit_occur,
						IFNULL(
							a.terminal_debit_balance,
							a.terminal_credit_balance
						),
						NULL AS wordNo
					FROM
						account_subject d
						LEFT JOIN period b ON d.book_id = b.book_id
						LEFT JOIN subject_balance a ON b.id = a.period_id
						AND d.subject_code = a.subject_code
					WHERE
						d.book_id = #{bookId,jdbcType=BIGINT}
					AND b.current_period >= #{periodFrom,jdbcType=BIGINT}
					<![CDATA[
					AND b.current_period <= #{periodTo,jdbcType=BIGINT}
					]]>
					<if test="valueNotNull != null">
					AND ( a.period_debit_occur IS NOT NULL OR a.period_credit_occur IS NOT NULL )
					</if>
					<![CDATA[
					AND d.`level` <= #{level,jdbcType=BIGINT}
					]]>
					AND d.`level` > 0
					GROUP BY
						d.subject_code,
						b.current_period
			) a,
			account_book c
		WHERE
		a.book_id = c.id
		AND a.book_id = #{bookId,jdbcType=BIGINT}
		<if test="subjectCodeFrom != null">
		<![CDATA[
		AND CAST(a.subject_code AS CHAR) >= CAST(#{subjectCodeFrom,jdbcType=BIGINT} AS CHAR)
		]]>
		</if>
		<if test="subjectCodeTo != null">
		<![CDATA[
		AND CAST(a.subject_code AS CHAR) < CAST(#{subjectCodeTo,jdbcType=BIGINT} AS CHAR)
		]]>
		</if>
		ORDER BY
			CAST(a.subject_code AS CHAR),
			a.current_period,
			locate(
				summary,
				'上年结转,期初余额,本期合计,本年累计'
			)
	</select>

    <select id="getSumByStartAndEndCode" resultType="java.util.Map" parameterType="java.util.Map">
        SELECT
        CASE t1.direction when 1 then sum(initial_debit_balance) else sum(initial_credit_balance) end as initial_balance,
        CASE t1.direction when 1 then sum(terminal_debit_balance) else sum(terminal_credit_balance) end as terminal_balance

        <if test="sum != null">
            ,SUM(#{sum}) as #{sum}
        </if>

        FROM
        subject_balance t,
        account_subject t1
        WHERE
        t.period_id = #{periodId}
        AND t.subject_code &gt;= #{startCode, jdbcType=BIGINT}
        AND t.subject_code &lt;= #{endCode, jdbcType=BIGINT}
        AND t.book_id = t1.book_id
        AND t.subject_code = t1.subject_code
    </select>

    <select id="getExpressCellValueWithBook" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT
			<choose>
			  <when test="searchFeild == '.JC'.toString()">
			    a.initial_debit_balance
			  </when>
			  <when test="searchFeild == '.DC'.toString()">
			    a.initial_credit_balance
			  </when>
			  <when test="searchFeild == '.JF'.toString()">
			    a.period_debit_occur
			  </when>
			  <when test="searchFeild == '.DF'.toString()">
			    a.period_credit_occur
			  </when>
			  <when test="searchFeild == '.JL'.toString()">
			    a.year_debit_occur
			  </when>
			  <when test="searchFeild == '.DL'.toString()">
			    a.year_credit_occur
			  </when>
			  <when test="searchFeild == '.JY'.toString()">
			    a.terminal_debit_balance
			  </when>
			  <when test="searchFeild == '.DY'.toString()">
			    a.terminal_credit_balance
			  </when>
			  <when test="searchFeild == '.SY'.toString()">
			    a.profit_loss_occur_amount
			  </when>
			  <when test="searchFeild == '.SL'.toString()">
			    a.profit_loss_total_occur_amount
			  </when>
			  <when test="searchFeild == '.C'.toString()">
			    IF (
					c.direction = 1,
					a.initial_debit_balance,
					a.initial_credit_balance
				)
			  </when>
			  <when test="searchFeild == null">
			    IF (
					c.direction = 1,
					a.terminal_debit_balance,
					a.terminal_credit_balance
				)
			  </when>
			</choose>
		FROM
			subject_balance a,
			account_book b,
			period p,
			account_subject c
		WHERE
			1=1
		<![CDATA[
		AND a.subject_code >= #{subjectCodeStart}
		AND a.subject_code < #{subjectCodeEnd}
		]]>
		<if test="year == null">
		AND a.book_id = b.id
		AND p.book_id = b.id
		AND a.period_id = p.id
		AND a.subject_code = c.subject_code
		AND a.book_id = c.book_id
		AND b.id = #{bookId}
			<if test="period != null">
				AND p.current_period = #{period}
			</if>
			<if test="periodStart != null">
				AND p.current_period &gt;= #{periodStart}
			</if>
		    <if test="periodEnd != null">
				AND p.current_period &lt;= #{periodEnd}
			</if>
		</if>
		<if test="year == '-1'.toString()">
		AND a.book_id = b.last_year_id
		AND p.book_id = b.id
		AND a.period_id = p.id
		AND a.subject_code = c.subject_code
		AND a.book_id = c.book_id
		AND b.id = #{bookId}
			<if test="period != null">
				AND p.current_period = #{period}
			</if>
			<if test="periodStart != null">
				AND p.current_period &gt;= #{periodStart}
			</if>
		    <if test="periodEnd != null">
				AND p.current_period &lt;= #{periodEnd}
			</if>
		</if>
    </select>
</mapper>