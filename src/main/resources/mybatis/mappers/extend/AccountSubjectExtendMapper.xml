<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ahyc.yjz.mapper.extend.AccountSubjectExtendMapper">

    <resultMap id="TextNameResultMap" type="cn.ahyc.yjz.dto.AccountSubjectTextNameDto"
               extends="cn.ahyc.yjz.mapper.base.AccountSubjectMapper.BaseResultMap">
        <result property="subjectTextname" column="subject_textname" javaType="java.lang.String" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="getTotalBalance" parameterType="java.lang.Long" resultType="java.util.Map">
        SELECT IFNULL(SUM(tt.total_debit), 0) - IFNULL(SUM(tt.total_credit), 0) AS dValue, IFNULL(SUM(tt.total_debit), 0) AS sum_total_debit, IFNULL(SUM(tt.total_credit), 0) AS sum_total_credit
        FROM (SELECT t.subject_code, t.direction, t.total_credit, t.total_debit, t.initial_left
            FROM account_subject t
            WHERE NOT EXISTS (SELECT t1.id
                    FROM account_subject t1, account_subject t2
                    WHERE t1.subject_code = t2.parent_subject_code
                        AND t.subject_code = t1.subject_code
                        AND t1.book_id = t2.book_id
                        AND t.book_id = t1.book_id)
                AND t.book_id = #{bookId}
            ORDER BY CAST(t.subject_code AS CHAR)
            ) tt
    </select>

    <select id="getInitLeftBalance" parameterType="java.lang.Long" resultType="java.util.Map">
        SELECT IFNULL(SUM(tt1.sum_total_debit) - SUM(tt1.sum_total_credit), 0) AS dValue, SUM(tt1.sum_total_credit) AS sum_total_credit, SUM(tt1.sum_total_debit) AS sum_total_debit
        FROM (SELECT SUM(IF(tt.direction = 1, tt.initial_left, 0)) AS sum_total_debit, SUM(IF(tt.direction = 2, tt.initial_left, 0)) AS sum_total_credit
            FROM (SELECT t.subject_code, t.direction, t.total_credit, t.total_debit, t.initial_left
                FROM account_subject t
                WHERE NOT EXISTS (SELECT t1.id
                        FROM account_subject t1, account_subject t2
                        WHERE t1.subject_code = t2.parent_subject_code
                            AND t.subject_code = t1.subject_code
                            AND t1.book_id = t2.book_id
                            AND t.book_id = t1.book_id)
                    AND t.book_id = #{bookId}
                ORDER BY CAST(t.subject_code AS CHAR)
                ) tt
            GROUP BY tt.direction
            ) tt1
    </select>

    <select id="getParentSum" resultType="java.util.Map">
        SELECT t1.parent_subject_code, t2.*
        FROM account_subject t1, (SELECT t.book_id, t.parent_subject_code AS subject_code, SUM(t.total_debit) AS
        sum_total_debit, SUM(t.total_credit) AS sum_total_credit, SUM(t.initial_left) AS sum_initial_left
        , SUM(t.year_occur_amount) AS sum_year_occur_amount
        FROM account_subject t
        WHERE t.parent_subject_code IN

        <foreach collection="parentSubjectCodes" item="parentSubjectCode" open="(" separator="," close=")">
            #{parentSubjectCode}
        </foreach>

        AND t.book_id = #{bookId}
        GROUP BY t.parent_subject_code
        ) t2
        WHERE t1.book_id = t2.book_id
        AND t2.subject_code = t1.subject_code
    </select>

    <select id="getLastChildSum" parameterType="java.lang.Long" resultType="java.util.Map">
       SELECT t3.parent_subject_code, t4.*
        FROM account_subject t3, (SELECT t.parent_subject_code AS subject_code, SUM(t.total_debit) AS sum_total_debit, SUM(t.total_credit) AS sum_total_credit, SUM(t.initial_left) AS sum_initial_left, SUM(t.year_occur_amount) AS sum_year_occur_amount
            FROM account_subject t
            WHERE NOT EXISTS (SELECT t1.id
                    FROM account_subject t1, account_subject t2
                    WHERE t1.subject_code = t2.parent_subject_code
                        AND t.subject_code = t1.subject_code
                        AND t1.book_id = t2.book_id
                        AND t.book_id = t1.book_id)
                AND t.book_id = #{bookId}
                AND t.parent_subject_code > 0
            GROUP BY t.parent_subject_code
            ORDER BY CAST(t.subject_code AS CHAR)
            ) t4
        WHERE t3.subject_code = t4.subject_code
    </select>

    <!--自定义sql-->
    <select id="getSubjectsByCategoryId" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
            t2.*, t1.id AS category_detail_id,
            t1.subject_code AS category_datail_parent_subject_code,
            IFNULL(
                (
                    SELECT
                        t3.length
                    FROM
                        subject_length t3
                    WHERE
                        t3.book_id = #{bookId}
                    AND t3.`level` = (t2.`level` + 1)
                ),
                2
            ) AS next_level_length
        FROM
            account_subject t1,
            account_subject t2
        WHERE
            t1.book_id = #{bookId}
        AND t1.book_id = t2.book_id
        AND t1.parent_subject_code = #{parent_subject_code}
        AND t2.parent_subject_code = t1.subject_code
        ORDER BY
            t2.subject_code
    </select>

    <select id="getChildrenSubjectsByCategoryId" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
            t.*, IFNULL(
                (
                    SELECT
                        t1.length
                    FROM
                        subject_length t1
                    WHERE
                        t1.book_id = #{bookId}
                    AND t1.`level` = (t.`level` + 1)
                ),
                2
            ) AS next_level_length
        FROM
            account_subject t
        WHERE
            t.book_id = #{bookId}
        AND t.parent_subject_code = #{parent_subject_code}
        ORDER BY
            t.subject_code
    </select>

    <select id="selectLastChildSubject" parameterType="java.lang.Long" resultMap="TextNameResultMap">
        SELECT t.*, CONCAT(t.subject_code,' ',t.subject_name) as subject_textname
        FROM account_subject t
        WHERE
            t.book_id = #{bookId}
        AND LEVEL > 0
        AND NOT EXISTS (SELECT parent_subject_code FROM account_subject b WHERE t.subject_code = b.parent_subject_code AND b.book_id = #{bookId})
        ORDER BY
            t.subject_code
    </select>
    <select id="getSubjectCodeByRoot" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
		  c.subject_code 
		FROM
		  account_subject a,
		  account_subject b,
		  account_subject c 
		WHERE a.subject_code = b.parent_subject_code
		  AND b.subject_code = c.parent_subject_code 
		  AND a.book_id = b.book_id 
		  AND a.book_id = c.book_id 
		  AND a.subject_code = - 6 
		  AND a.book_id = #{bookId,jdbcType=BIGINT} 
		LIMIT 1 
    </select>
    <insert id="copyAccountSubject" parameterType="java.util.Map">
		INSERT INTO account_subject (
		  subject_code,
		  subject_name,
		  parent_subject_code,
		  LEVEL,
		  tip_info,
		  direction,
		  book_id,
		  initial_left,
		  end_flag,
		  base_flag,
		  company_id
		) 
		SELECT 
		  a.subject_code,
		  a.subject_name,
		  a.parent_subject_code,
		  a.LEVEL,
		  a.tip_info,
		  a.direction,
		  #{newBookId,jdbcType=BIGINT},
		  CASE
		    WHEN a.direction = 1 
		    THEN b.terminal_debit_balance 
		    WHEN a.direction = 2 
		    THEN b.terminal_credit_balance 
		    ELSE 0 
		  END,
		  0,
		  a.base_flag,
		  a.company_id 
		FROM
		  account_subject a 
		  LEFT JOIN subject_balance b 
		    ON a.subject_code = b.subject_code 
		    AND a.book_id = b.book_id 
		    AND b.period_id = #{periodId,jdbcType=BIGINT}
		    AND b.book_id = #{oldBookId,jdbcType=BIGINT}
		WHERE a.book_id = #{oldBookId,jdbcType=BIGINT}
</insert>
</mapper>